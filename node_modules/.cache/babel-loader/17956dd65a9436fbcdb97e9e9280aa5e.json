{"ast":null,"code":"var _jsxFileName = \"/Users/hiagodiniz/Desktop/LetsCode/desafio-tecnico-frontend/FRONT/my-app/src/components/new-card-adder/new-card-adder.tsx\";\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Api from '../../store/store';\nimport { HttpRequestStatus, ListType } from '../../utils/enums';\nimport { TextInput } from '../inputs/text-input/text-input';\nimport { TextareaInput } from '../inputs/textarea-input/textarea-input';\nimport { updatePostStatus } from './../../reducers/reducer';\nimport './new-card-adder.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n;\n\nclass NewCardAdder extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setTemporaryCardValue = (value, key) => this.setState(prevState => ({\n      temporaryCard: { ...prevState.temporaryCard,\n        [key]: value\n      }\n    }));\n\n    this.toggleExpanded = () => {\n      if (this.state.expanded) {\n        this.submitCard();\n        return;\n      }\n\n      this.setState({\n        expanded: true\n      });\n    };\n\n    this.submitCard = () => {\n      if (this.getCardValidation()) {\n        const entity = this.state.temporaryCard;\n        Api.postCard(entity);\n      }\n    };\n\n    this.getCardValidation = () => {\n      const {\n        temporaryCard\n      } = this.state;\n      const errors = {\n        titulo: temporaryCard.titulo == null || temporaryCard.titulo === '',\n        conteudo: temporaryCard.conteudo == null || temporaryCard.conteudo === ''\n      };\n      this.setState({\n        errors\n      });\n      return errors.titulo || errors.conteudo;\n    };\n\n    this.state = {\n      expanded: false,\n      temporaryCard: {\n        lista: ListType.TO_DO,\n        titulo: '',\n        conteudo: ''\n      },\n      errors: {}\n    };\n  }\n\n  componentWillReceiveProps(newProps) {\n    if (newProps.postStatus === HttpRequestStatus.SUCCESS) {\n      this.setState({\n        expanded: false,\n        temporaryCard: {\n          lista: ListType.TO_DO,\n          titulo: '',\n          conteudo: ''\n        }\n      }, () => this.props.updatePostStatus(HttpRequestStatus.NOOP));\n    }\n  }\n\n  render() {\n    const {\n      expanded,\n      temporaryCard,\n      errors\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `new-card-adder-container ${expanded && 'expanded'}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: 'form-content hidden',\n        children: [/*#__PURE__*/_jsxDEV(TextInput, {\n          title: 'Título',\n          placeholder: 'Ex: Marcar reunião',\n          value: temporaryCard.titulo,\n          onChange: event => this.setTemporaryCardValue(event.target.value, 'titulo'),\n          error: errors.titulo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextareaInput, {\n          title: 'Conteúdo',\n          placeholder: 'Ex: Falar com Fulano sobre a reunião',\n          value: temporaryCard.conteudo,\n          onChange: event => this.setTemporaryCardValue(event.target.value, 'conteudo'),\n          error: errors.conteudo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: 'create-card-button-container',\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: 'add-button',\n          type: 'button',\n          onClick: () => this.toggleExpanded(),\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: 'text',\n            children: \"Novo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            className: 'add-icon',\n            icon: faPlus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\n;\n\nconst mapStateToProps = storeState => ({\n  postStatus: storeState.postStatus\n});\n\nconst mapDispatchToProps = {\n  updatePostStatus\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(NewCardAdder);","map":{"version":3,"sources":["/Users/hiagodiniz/Desktop/LetsCode/desafio-tecnico-frontend/FRONT/my-app/src/components/new-card-adder/new-card-adder.tsx"],"names":["faPlus","FontAwesomeIcon","React","connect","Api","HttpRequestStatus","ListType","TextInput","TextareaInput","updatePostStatus","NewCardAdder","Component","constructor","props","setTemporaryCardValue","value","key","setState","prevState","temporaryCard","toggleExpanded","state","expanded","submitCard","getCardValidation","entity","postCard","errors","titulo","conteudo","lista","TO_DO","componentWillReceiveProps","newProps","postStatus","SUCCESS","NOOP","render","event","target","mapStateToProps","storeState","mapDispatchToProps"],"mappings":";AAAA,SAASA,MAAT,QAAuB,mCAAvB;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,SAASC,iBAAT,EAA4BC,QAA5B,QAA4C,mBAA5C;AAEA,SAASC,SAAT,QAA0B,iCAA1B;AACA,SAASC,aAAT,QAA8B,yCAA9B;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AACA,OAAO,uBAAP;;AAWiE;;AAEjE,MAAMC,YAAN,SAA2BR,KAAK,CAACS,SAAjC,CAAmF;AACjFC,EAAAA,WAAW,CAACC,KAAD,EAAa;AACtB,UAAMA,KAAN;;AADsB,SA0BxBC,qBA1BwB,GA0BA,CAACC,KAAD,EAAgBC,GAAhB,KAA+C,KAAKC,QAAL,CAAcC,SAAS,KAAK;AACjGC,MAAAA,aAAa,EAAE,EACb,GAAGD,SAAS,CAACC,aADA;AAEb,SAACH,GAAD,GAAOD;AAFM;AADkF,KAAL,CAAvB,CA1B/C;;AAAA,SAiCxBK,cAjCwB,GAiCP,MAAM;AACrB,UAAI,KAAKC,KAAL,CAAWC,QAAf,EAAyB;AACvB,aAAKC,UAAL;AACA;AACD;;AACD,WAAKN,QAAL,CAAc;AACZK,QAAAA,QAAQ,EAAE;AADE,OAAd;AAGD,KAzCuB;;AAAA,SA2CxBC,UA3CwB,GA2CX,MAAM;AACjB,UAAI,KAAKC,iBAAL,EAAJ,EAA8B;AAE5B,cAAMC,MAAM,GAAG,KAAKJ,KAAL,CAAWF,aAA1B;AACAf,QAAAA,GAAG,CAACsB,QAAJ,CAAaD,MAAb;AACD;AACF,KAjDuB;;AAAA,SAmDxBD,iBAnDwB,GAmDJ,MAAM;AACxB,YAAM;AAAEL,QAAAA;AAAF,UAAoB,KAAKE,KAA/B;AACA,YAAMM,MAAM,GAAG;AACbC,QAAAA,MAAM,EAAET,aAAa,CAACS,MAAd,IAAwB,IAAxB,IAAgCT,aAAa,CAACS,MAAd,KAAyB,EADpD;AAEbC,QAAAA,QAAQ,EAAEV,aAAa,CAACU,QAAd,IAA0B,IAA1B,IAAkCV,aAAa,CAACU,QAAd,KAA2B;AAF1D,OAAf;AAIA,WAAKZ,QAAL,CAAc;AACZU,QAAAA;AADY,OAAd;AAGA,aAAOA,MAAM,CAACC,MAAP,IAAiBD,MAAM,CAACE,QAA/B;AACD,KA7DuB;;AAEtB,SAAKR,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE,KADC;AAEXH,MAAAA,aAAa,EAAE;AACbW,QAAAA,KAAK,EAAExB,QAAQ,CAACyB,KADH;AAEbH,QAAAA,MAAM,EAAE,EAFK;AAGbC,QAAAA,QAAQ,EAAE;AAHG,OAFJ;AAOXF,MAAAA,MAAM,EAAE;AAPG,KAAb;AASD;;AAEDK,EAAAA,yBAAyB,CAACC,QAAD,EAAuB;AAC9C,QAAIA,QAAQ,CAACC,UAAT,KAAwB7B,iBAAiB,CAAC8B,OAA9C,EAAuD;AACrD,WAAKlB,QAAL,CAAc;AACZK,QAAAA,QAAQ,EAAE,KADE;AAEZH,QAAAA,aAAa,EAAE;AACbW,UAAAA,KAAK,EAAExB,QAAQ,CAACyB,KADH;AAEbH,UAAAA,MAAM,EAAE,EAFK;AAGbC,UAAAA,QAAQ,EAAE;AAHG;AAFH,OAAd,EAOG,MAAM,KAAKhB,KAAL,CAAWJ,gBAAX,CAA4BJ,iBAAiB,CAAC+B,IAA9C,CAPT;AAQD;AACF;;AAuCDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEf,MAAAA,QAAF;AAAYH,MAAAA,aAAZ;AAA2BQ,MAAAA;AAA3B,QAAsC,KAAKN,KAAjD;AAEA,wBACE;AAAK,MAAA,SAAS,EAAG,4BAA2BC,QAAQ,IAAI,UAAW,EAAnE;AAAA,8BACE;AAAK,QAAA,SAAS,EAAE,qBAAhB;AAAA,gCACE,QAAC,SAAD;AACE,UAAA,KAAK,EAAE,QADT;AAEE,UAAA,WAAW,EAAE,oBAFf;AAGE,UAAA,KAAK,EAAEH,aAAa,CAACS,MAHvB;AAIE,UAAA,QAAQ,EAAEU,KAAK,IAAI,KAAKxB,qBAAL,CAA2BwB,KAAK,CAACC,MAAN,CAAaxB,KAAxC,EAA+C,QAA/C,CAJrB;AAKE,UAAA,KAAK,EAAEY,MAAM,CAACC;AALhB;AAAA;AAAA;AAAA;AAAA,gBADF,eAQE,QAAC,aAAD;AACE,UAAA,KAAK,EAAE,UADT;AAEE,UAAA,WAAW,EAAE,sCAFf;AAGE,UAAA,KAAK,EAAET,aAAa,CAACU,QAHvB;AAIE,UAAA,QAAQ,EAAES,KAAK,IAAI,KAAKxB,qBAAL,CAA2BwB,KAAK,CAACC,MAAN,CAAaxB,KAAxC,EAA+C,UAA/C,CAJrB;AAKE,UAAA,KAAK,EAAEY,MAAM,CAACE;AALhB;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAiBE;AAAK,QAAA,SAAS,EAAE,8BAAhB;AAAA,+BACE;AAAQ,UAAA,SAAS,EAAE,YAAnB;AAAiC,UAAA,IAAI,EAAE,QAAvC;AAAiD,UAAA,OAAO,EAAE,MAAM,KAAKT,cAAL,EAAhE;AAAA,kCACE;AAAM,YAAA,SAAS,EAAE,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,eAAD;AAAiB,YAAA,SAAS,EAAE,UAA5B;AAAwC,YAAA,IAAI,EAAEpB;AAA9C;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AA0BD;;AA7FgF;;AA8FlF;;AAED,MAAMwC,eAAe,GAAIC,UAAD,KAAgC;AACtDP,EAAAA,UAAU,EAAEO,UAAU,CAACP;AAD+B,CAAhC,CAAxB;;AAIA,MAAMQ,kBAAkB,GAAG;AACzBjC,EAAAA;AADyB,CAA3B;AAOA,eAAeN,OAAO,CAACqC,eAAD,EAAkBE,kBAAlB,CAAP,CAA6ChC,YAA7C,CAAf","sourcesContent":["import { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { IReducerState } from '../../reducers/reducer';\nimport Api from '../../store/store';\nimport { HttpRequestStatus, ListType } from '../../utils/enums';\nimport { ITemporaryCard } from '../../utils/interfaces';\nimport { TextInput } from '../inputs/text-input/text-input';\nimport { TextareaInput } from '../inputs/textarea-input/textarea-input';\nimport { updatePostStatus } from './../../reducers/reducer';\nimport './new-card-adder.scss';\n\ninterface INewCardAdderState {\n  expanded: boolean;\n  temporaryCard: ITemporaryCard;\n  errors: {\n    titulo?: boolean;\n    conteudo?: boolean;\n  }\n}\n\ninterface INewCardAdderProps extends StateProps, DispatchProps {};\n\nclass NewCardAdder extends React.Component<INewCardAdderProps, INewCardAdderState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      expanded: false,\n      temporaryCard: {\n        lista: ListType.TO_DO,\n        titulo: '',\n        conteudo: ''\n      },\n      errors: {}\n    };\n  }\n\n  componentWillReceiveProps(newProps: StateProps) {\n    if (newProps.postStatus === HttpRequestStatus.SUCCESS) {\n      this.setState({\n        expanded: false,\n        temporaryCard: {\n          lista: ListType.TO_DO,\n          titulo: '',\n          conteudo: ''\n        }\n      }, () => this.props.updatePostStatus(HttpRequestStatus.NOOP));\n    }\n  }\n\n  setTemporaryCardValue = (value: string, key: 'titulo' | 'conteudo') => this.setState(prevState => ({\n    temporaryCard: {\n      ...prevState.temporaryCard,\n      [key]: value\n    }\n  }));\n\n  toggleExpanded = () => {\n    if (this.state.expanded) {\n      this.submitCard();\n      return;\n    }\n    this.setState({\n      expanded: true\n    });\n  };\n\n  submitCard = () => {\n    if (this.getCardValidation()) {\n\n      const entity = this.state.temporaryCard;\n      Api.postCard(entity);\n    }\n  };\n\n  getCardValidation = () => {\n    const { temporaryCard } = this.state;\n    const errors = {\n      titulo: temporaryCard.titulo == null || temporaryCard.titulo === '',\n      conteudo: temporaryCard.conteudo == null || temporaryCard.conteudo === ''\n    };\n    this.setState({\n      errors\n    });\n    return errors.titulo || errors.conteudo;\n  };\n\n  render() {\n    const { expanded, temporaryCard, errors } = this.state;\n\n    return (\n      <div className={`new-card-adder-container ${expanded && 'expanded'}`}>\n        <div className={'form-content hidden'}>\n          <TextInput\n            title={'Título'}\n            placeholder={'Ex: Marcar reunião'}\n            value={temporaryCard.titulo}\n            onChange={event => this.setTemporaryCardValue(event.target.value, 'titulo')}\n            error={errors.titulo}\n          />\n          <TextareaInput\n            title={'Conteúdo'}\n            placeholder={'Ex: Falar com Fulano sobre a reunião'}\n            value={temporaryCard.conteudo}\n            onChange={event => this.setTemporaryCardValue(event.target.value, 'conteudo')}\n            error={errors.conteudo}\n          />\n        </div>\n        <div className={'create-card-button-container'}>\n          <button className={'add-button'} type={'button'} onClick={() => this.toggleExpanded()}>\n            <span className={'text'}>Novo</span>\n            <FontAwesomeIcon className={'add-icon'} icon={faPlus}/>\n          </button>\n        </div>\n      </div>\n    );\n  }\n};\n\nconst mapStateToProps = (storeState: IReducerState) => ({\n  postStatus: storeState.postStatus\n});\n\nconst mapDispatchToProps = {\n  updatePostStatus\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewCardAdder);\n"]},"metadata":{},"sourceType":"module"}
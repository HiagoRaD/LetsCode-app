{"ast":null,"code":"import { isEmpty, cloneDeep, set, defaultsDeep, unset, get } from 'lodash';\nimport { HttpRequestStatus } from './enums';\nexport const updateCardsState = (cards, cardToUpdate) => {\n  const newCards = cards;\n  const index = get(newCards, cardToUpdate.lista).findIndex(it => it.id === cardToUpdate.id);\n  set(get(newCards, cardToUpdate.lista), index, cardToUpdate);\n  return newCards;\n};\nexport const createNewObject = (entities, callerKey, reducerFieldObject) => {\n  const entitiesCopy = cloneDeep(entities);\n  set(entitiesCopy, callerKey, reducerFieldObject);\n  return entitiesCopy;\n};\nexport const updateObjectByKey = (entities, callerKey, reducerFieldObject) => {\n  if (isEmpty(entities[callerKey])) {\n    return createNewObject(entities, callerKey, reducerFieldObject);\n  }\n\n  const entitiesCopy = { ...cloneDeep(entities),\n    [callerKey]: defaultsDeep(reducerFieldObject, entities[callerKey])\n  };\n  return entitiesCopy;\n};\nexport const resetObjectByKey = (entities, callerKey) => {\n  const entitiesCopy = cloneDeep(entities);\n  set(entitiesCopy, callerKey, {\n    status: HttpRequestStatus.NOOP,\n    data: null\n  });\n  return entitiesCopy;\n};\nexport const deleteObjectByKey = (entities, callerKey) => {\n  const entitiesCopy = cloneDeep(entities);\n  unset(entitiesCopy, callerKey);\n  return isEmpty(entitiesCopy) ? {} : entitiesCopy;\n};","map":{"version":3,"sources":["/Users/hiagodiniz/Desktop/LetsCode/desafio-tecnico-frontend/FRONT/my-app/src/utils/reducer-utils.tsx"],"names":["isEmpty","cloneDeep","set","defaultsDeep","unset","get","HttpRequestStatus","updateCardsState","cards","cardToUpdate","newCards","index","lista","findIndex","it","id","createNewObject","entities","callerKey","reducerFieldObject","entitiesCopy","updateObjectByKey","resetObjectByKey","status","NOOP","data","deleteObjectByKey"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,SAAlB,EAA6BC,GAA7B,EAAkCC,YAAlC,EAAgDC,KAAhD,EAAuDC,GAAvD,QAAkE,QAAlE;AACA,SAASC,iBAAT,QAAkC,SAAlC;AAGA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,KAAD,EAAoBC,YAApB,KAA4C;AAC1E,QAAMC,QAAQ,GAAGF,KAAjB;AACA,QAAMG,KAAK,GAAGN,GAAG,CAACK,QAAD,EAAWD,YAAY,CAACG,KAAxB,CAAH,CAAkCC,SAAlC,CAA6CC,EAAD,IAAaA,EAAE,CAACC,EAAH,KAAUN,YAAY,CAACM,EAAhF,CAAd;AACAb,EAAAA,GAAG,CAACG,GAAG,CAACK,QAAD,EAAWD,YAAY,CAACG,KAAxB,CAAJ,EAAoCD,KAApC,EAA2CF,YAA3C,CAAH;AACA,SACEC,QADF;AAGD,CAPM;AASP,OAAO,MAAMM,eAAe,GAAG,CAC7BC,QAD6B,EAE7BC,SAF6B,EAG7BC,kBAH6B,KAIK;AAClC,QAAMC,YAAY,GAAGnB,SAAS,CAACgB,QAAD,CAA9B;AACAf,EAAAA,GAAG,CAACkB,YAAD,EAAeF,SAAf,EAA0BC,kBAA1B,CAAH;AACA,SAAOC,YAAP;AACD,CARM;AAUP,OAAO,MAAMC,iBAAiB,GAAG,CAC/BJ,QAD+B,EAE/BC,SAF+B,EAG/BC,kBAH+B,KAIG;AAClC,MAAInB,OAAO,CAACiB,QAAQ,CAACC,SAAD,CAAT,CAAX,EAAkC;AAChC,WAAOF,eAAe,CAACC,QAAD,EAAWC,SAAX,EAAsBC,kBAAtB,CAAtB;AACD;;AACD,QAAMC,YAAY,GAAG,EACnB,GAAGnB,SAAS,CAACgB,QAAD,CADO;AAEnB,KAACC,SAAD,GAAaf,YAAY,CAACgB,kBAAD,EAAqBF,QAAQ,CAACC,SAAD,CAA7B;AAFN,GAArB;AAIA,SAAOE,YAAP;AACD,CAbM;AAeP,OAAO,MAAME,gBAAgB,GAAG,CAC9BL,QAD8B,EAE9BC,SAF8B,KAGI;AAClC,QAAME,YAAY,GAAGnB,SAAS,CAACgB,QAAD,CAA9B;AACAf,EAAAA,GAAG,CAACkB,YAAD,EAAeF,SAAf,EAA0B;AAC3BK,IAAAA,MAAM,EAAEjB,iBAAiB,CAACkB,IADC;AAE3BC,IAAAA,IAAI,EAAE;AAFqB,GAA1B,CAAH;AAIA,SAAOL,YAAP;AACD,CAVM;AAYP,OAAO,MAAMM,iBAAiB,GAAG,CAC/BT,QAD+B,EAE/BC,SAF+B,KAGG;AAClC,QAAME,YAAY,GAAGnB,SAAS,CAACgB,QAAD,CAA9B;AACAb,EAAAA,KAAK,CAACgB,YAAD,EAAeF,SAAf,CAAL;AACA,SAAOlB,OAAO,CAACoB,YAAD,CAAP,GAAwB,EAAxB,GAA6BA,YAApC;AACD,CAPM","sourcesContent":["import { isEmpty, cloneDeep, set, defaultsDeep, unset, get } from 'lodash';\nimport { HttpRequestStatus } from './enums';\nimport { ICard, ICardsList, IReducerListObjects, IRequestData } from './interfaces';\n\nexport const updateCardsState = (cards: ICardsList, cardToUpdate: ICard) => {\n  const newCards = cards;\n  const index = get(newCards, cardToUpdate.lista).findIndex((it: any) => it.id === cardToUpdate.id);\n  set(get(newCards, cardToUpdate.lista), index, cardToUpdate);\n  return (\n    newCards\n  );\n};\n\nexport const createNewObject = <DataType extends unknown>(\n  entities: IReducerListObjects<DataType>,\n  callerKey: string | number,\n  reducerFieldObject: IRequestData<DataType>\n): IReducerListObjects<DataType> => {\n  const entitiesCopy = cloneDeep(entities);\n  set(entitiesCopy, callerKey, reducerFieldObject);\n  return entitiesCopy;\n};\n\nexport const updateObjectByKey = <DataType extends unknown>(\n  entities: IReducerListObjects<DataType>,\n  callerKey: string | number,\n  reducerFieldObject: IRequestData<DataType>\n): IReducerListObjects<DataType> => {\n  if (isEmpty(entities[callerKey])) {\n    return createNewObject(entities, callerKey, reducerFieldObject);\n  }\n  const entitiesCopy = {\n    ...cloneDeep(entities),\n    [callerKey]: defaultsDeep(reducerFieldObject, entities[callerKey])\n  };\n  return entitiesCopy;\n};\n\nexport const resetObjectByKey = <DataType extends unknown>(\n  entities: IReducerListObjects<DataType>,\n  callerKey: string | number\n): IReducerListObjects<DataType> => {\n  const entitiesCopy = cloneDeep(entities);\n  set(entitiesCopy, callerKey, {\n    status: HttpRequestStatus.NOOP,\n    data: null\n  });\n  return entitiesCopy;\n};\n\nexport const deleteObjectByKey = <DataType extends unknown>(\n  entities: IReducerListObjects<DataType>,\n  callerKey: string | number\n): IReducerListObjects<DataType> => {\n  const entitiesCopy = cloneDeep(entities);\n  unset(entitiesCopy, callerKey);\n  return isEmpty(entitiesCopy) ? {} : entitiesCopy;\n}"]},"metadata":{},"sourceType":"module"}
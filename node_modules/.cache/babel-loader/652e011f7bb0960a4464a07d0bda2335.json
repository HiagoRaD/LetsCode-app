{"ast":null,"code":"import axios from 'axios';\nimport { get } from 'lodash';\nimport { createStore } from 'redux';\nimport appReducer from '../reducers/reducer';\nimport { HttpRequestStatus } from '../utils/enums';\nimport { API_PREFIX, getRequestConfig } from '../utils/utils';\nimport { updateCards, updateGetStatus, updateDeleteStatus, updatePutStatus } from '../reducers/reducer';\nconst store = createStore(appReducer);\nconst requestConfig = getRequestConfig();\nexport const getCards = () => {\n  store.dispatch(updateGetStatus(HttpRequestStatus.ONGOING));\n  const promise = axios.get(`${API_PREFIX}/cards/`, requestConfig);\n  promise.then(response => {\n    store.dispatch(updateGetStatus(HttpRequestStatus.SUCCESS));\n    const separatedList = getSeparatedList(response.data);\n    store.dispatch(updateCards(separatedList));\n  }).catch(() => store.dispatch(updateGetStatus(HttpRequestStatus.ERROR)));\n};\n\nconst getSeparatedList = cards => {\n  const separatedList = {\n    ToDo: [],\n    Doing: [],\n    Done: []\n  };\n  cards.forEach(it => {\n    separatedList[get(it, 'lista', '')].push(it);\n  });\n  return separatedList;\n};\n\nexport const deleteCard = uuid => {\n  store.dispatch(updateDeleteStatus(HttpRequestStatus.ONGOING, uuid));\n  const promise = axios.delete(`${API_PREFIX}/cards/${uuid}`, requestConfig);\n  promise.then(response => {\n    store.dispatch(updateDeleteStatus(HttpRequestStatus.SUCCESS, uuid));\n    const separatedList = getSeparatedList(response.data);\n    store.dispatch(updateCards(separatedList));\n  }).catch(() => updateDeleteStatus(HttpRequestStatus.ERROR, uuid));\n};\nexport const updateCard = card => {\n  const uuid = card.id;\n  store.dispatch(updatePutStatus(HttpRequestStatus.ONGOING, uuid));\n  const promise = axios.put(`${API_PREFIX}/cards/${uuid}`, card, requestConfig);\n  promise.then(response => {\n    updatePutStatus(HttpRequestStatus.SUCCESS, uuid);\n    const responseCard = response.data;\n  }).catch(() => updatePutStatus(HttpRequestStatus.ERROR, uuid)); // (PUT)       http://0.0.0.0:5000/cards/{id}\n};\nexport const createCard = card => {// (POST)      http://0.0.0.0:5000/cards/\n};\nexport const getStore = () => store;","map":{"version":3,"sources":["/Users/hiagodiniz/Desktop/LetsCode/desafio-tecnico-frontend/FRONT/my-app/src/store/store.ts"],"names":["axios","get","createStore","appReducer","HttpRequestStatus","API_PREFIX","getRequestConfig","updateCards","updateGetStatus","updateDeleteStatus","updatePutStatus","store","requestConfig","getCards","dispatch","ONGOING","promise","then","response","SUCCESS","separatedList","getSeparatedList","data","catch","ERROR","cards","ToDo","Doing","Done","forEach","it","push","deleteCard","uuid","delete","updateCard","card","id","put","responseCard","createCard","getStore"],"mappings":"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","sourcesContent":["\nimport axios from 'axios';\nimport { get } from 'lodash';\nimport { createStore } from 'redux';\nimport appReducer from '../reducers/reducer';\nimport { HttpRequestStatus } from '../utils/enums';\nimport { API_PREFIX, getRequestConfig } from '../utils/utils';\nimport { updateCards, updateGetStatus, updateDeleteStatus, updatePutStatus } from '../reducers/reducer';\nimport { ICard } from '../utils/interfaces';\n\nconst store = createStore(appReducer);\n\nconst requestConfig = getRequestConfig();\n\nexport const getCards = () => {\n  store.dispatch(updateGetStatus(HttpRequestStatus.ONGOING));\n\n  const promise = axios.get(`${API_PREFIX}/cards/`, requestConfig);\n\n  promise.then(response => {\n    store.dispatch(updateGetStatus(HttpRequestStatus.SUCCESS));\n    const separatedList: any = getSeparatedList(response.data);\n    store.dispatch(updateCards(separatedList))\n  }).catch(() => store.dispatch(updateGetStatus(HttpRequestStatus.ERROR)));\n};\n\nconst getSeparatedList = (cards: ICard[]) => {\n  const separatedList: any = {\n    ToDo: [],\n    Doing: [],\n    Done: []\n  };\n  cards.forEach((it: any) => {\n    separatedList[get(it, 'lista', '')].push(it);\n  });\n  return separatedList;\n};\n\nexport const deleteCard = (uuid: any) => {\n  store.dispatch(updateDeleteStatus(HttpRequestStatus.ONGOING, uuid));\n\n  const promise = axios.delete(`${API_PREFIX}/cards/${uuid}`, requestConfig);\n\n  promise.then(response => {\n    store.dispatch(updateDeleteStatus(HttpRequestStatus.SUCCESS, uuid));\n    const separatedList: any = getSeparatedList(response.data);\n    store.dispatch(updateCards(separatedList));\n  }).catch(() => updateDeleteStatus(HttpRequestStatus.ERROR, uuid))\n}; \n\nexport const updateCard = (card: ICard) => {\n  const uuid = card.id;\n  store.dispatch(updatePutStatus(HttpRequestStatus.ONGOING, uuid));\n  \n  const promise = axios.put(`${API_PREFIX}/cards/${uuid}`, card, requestConfig);\n\n  promise.then(response => {\n    updatePutStatus(HttpRequestStatus.SUCCESS, uuid);\n    const responseCard = response.data;\n\n  }).catch(() => updatePutStatus(HttpRequestStatus.ERROR, uuid))\n  // (PUT)       http://0.0.0.0:5000/cards/{id}\n};\n\nexport const createCard = (card: ICard) => {\n  // (POST)      http://0.0.0.0:5000/cards/\n};\n\nexport const getStore = () => store;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/hiagodiniz/Desktop/LetsCode/desafio-tecnico-frontend/FRONT/my-app/src/components/kanban-column/kanban-column.tsx\";\nimport { get, kebabCase, upperFirst } from 'lodash';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport KanbanCard from '../kanban-card/kanban-card';\nimport './kanban-column.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n;\n\nfunction KanbanColumn(props) {\n  const getColumnTitle = type => upperFirst(kebabCase(type).replace('-', ' '));\n\n  const {\n    type\n  } = props;\n  const cardsList = get(props.cardsList, type, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `kanban-column-container ${type}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'column-head',\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: getColumnTitle(type)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'column-body',\n      children: cardsList.map((card, index) => /*#__PURE__*/_jsxDEV(KanbanCard, {\n        card: card\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n\n_c = KanbanColumn;\n;\n\nconst mapStateToProps = (storeState, ownProps) => ({\n  cardsList: storeState.cards\n});\n\nexport default connect(mapStateToProps)(KanbanColumn);\n\nvar _c;\n\n$RefreshReg$(_c, \"KanbanColumn\");","map":{"version":3,"sources":["/Users/hiagodiniz/Desktop/LetsCode/desafio-tecnico-frontend/FRONT/my-app/src/components/kanban-column/kanban-column.tsx"],"names":["get","kebabCase","upperFirst","React","connect","KanbanCard","KanbanColumn","props","getColumnTitle","type","replace","cardsList","map","card","index","mapStateToProps","storeState","ownProps","cards"],"mappings":";AAAA,SAASA,GAAT,EAAcC,SAAd,EAAyBC,UAAzB,QAA2C,QAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAIA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,OAAO,sBAAP;;AAIC;;AAED,SAASC,YAAT,CAAsBC,KAAtB,EAAiD;AAC/C,QAAMC,cAAc,GAAIC,IAAD,IAAoBP,UAAU,CAACD,SAAS,CAACQ,IAAD,CAAT,CAAgBC,OAAhB,CAAwB,GAAxB,EAA6B,GAA7B,CAAD,CAArD;;AAEA,QAAM;AAAED,IAAAA;AAAF,MAAWF,KAAjB;AACA,QAAMI,SAAkB,GAAGX,GAAG,CAACO,KAAK,CAACI,SAAP,EAAkBF,IAAlB,EAAwB,EAAxB,CAA9B;AAEA,sBACE;AAAK,IAAA,SAAS,EAAG,2BAA0BA,IAAK,EAAhD;AAAA,4BACE;AAAK,MAAA,SAAS,EAAE,aAAhB;AAAA,6BACE;AAAA,kBAAKD,cAAc,CAACC,IAAD;AAAnB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAK,MAAA,SAAS,EAAE,aAAhB;AAAA,gBACGE,SAAS,CAACC,GAAV,CAAc,CAACC,IAAD,EAAOC,KAAP,kBACb,QAAC,UAAD;AAAwB,QAAA,IAAI,EAAED;AAA9B,SAAiBC,KAAjB;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;KAlBQR,Y;AAkBR;;AAED,MAAMS,eAAe,GAAG,CAACC,UAAD,EAA4BC,QAA5B,MAA+C;AACrEN,EAAAA,SAAS,EAAEK,UAAU,CAACE;AAD+C,CAA/C,CAAxB;;AAMA,eAAed,OAAO,CAACW,eAAD,CAAP,CAAyBT,YAAzB,CAAf","sourcesContent":["import { get, kebabCase, upperFirst } from 'lodash';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { IReducerState } from '../../reducers/reducer';\nimport { ListType } from '../../utils/enums';\nimport { ICard } from '../../utils/interfaces';\nimport KanbanCard from '../kanban-card/kanban-card';\nimport './kanban-column.scss';\n\ninterface IKanbanColumnProps extends StateProps {\n  type: ListType;\n};\n\nfunction KanbanColumn(props: IKanbanColumnProps) {\n  const getColumnTitle = (type: ListType) => upperFirst(kebabCase(type).replace('-', ' '));\n\n  const { type } = props;\n  const cardsList: ICard[] = get(props.cardsList, type, []);\n\n  return (\n    <div className={`kanban-column-container ${type}`}>\n      <div className={'column-head'}>\n        <h2>{getColumnTitle(type)}</h2>\n      </div>\n      <div className={'column-body'}>\n        {cardsList.map((card, index) => (\n          <KanbanCard key={index} card={card} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (storeState: IReducerState, ownProps: any) => ({\n  cardsList: storeState.cards\n});\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\n\nexport default connect(mapStateToProps)(KanbanColumn);\n"]},"metadata":{},"sourceType":"module"}
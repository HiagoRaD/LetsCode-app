{"ast":null,"code":"import axios from 'axios';\nimport { cloneDeep, get } from 'lodash';\nimport { createStore } from 'redux';\nimport appReducer, { addNewCard, updateCardList } from '../reducers/reducer';\nimport { HttpRequestStatus } from '../utils/enums';\nimport { API_PREFIX, getRequestConfig } from '../utils/utils';\nimport { updateCards, updateGetStatus, updateDeleteStatus, updatePutStatus, updateCard, updatePostStatus } from '../reducers/reducer';\nimport toast from 'react-hot-toast';\nconst store = createStore(appReducer);\nconst requestConfig = getRequestConfig(); // api communication functions\n\nexport default class Api {\n  static getCards() {\n    store.dispatch(updateGetStatus(HttpRequestStatus.ONGOING));\n    const promise = axios.get(`${API_PREFIX}/cards/`, requestConfig);\n    promise.then(response => {\n      store.dispatch(updateGetStatus(HttpRequestStatus.SUCCESS));\n      const separatedList = getSeparatedList(response.data);\n      store.dispatch(updateCards(separatedList));\n    }).catch(() => store.dispatch(updateGetStatus(HttpRequestStatus.ERROR)));\n  }\n\n  static deleteCard(uuid) {\n    store.dispatch(updateDeleteStatus(HttpRequestStatus.ONGOING, uuid));\n    const promise = axios.delete(`${API_PREFIX}/cards/${uuid}`, requestConfig);\n    promise.then(response => {\n      store.dispatch(updateDeleteStatus(HttpRequestStatus.SUCCESS, uuid));\n      toast.success('Card deletado com sucesso!');\n      const separatedList = getSeparatedList(response.data);\n      store.dispatch(updateCards(separatedList));\n    }).catch(() => updateDeleteStatus(HttpRequestStatus.ERROR, uuid));\n  }\n\n  static putCard(card) {\n    const uuid = card.id;\n    store.dispatch(updatePutStatus(HttpRequestStatus.ONGOING, uuid));\n    const promise = axios.put(`${API_PREFIX}/cards/${uuid}`, card, requestConfig);\n    promise.then(response => {\n      store.dispatch(updatePutStatus(HttpRequestStatus.SUCCESS, uuid));\n      toast.success('Card atualizado com sucesso!');\n      const responseCard = response.data;\n      store.dispatch(updateCard(responseCard));\n    }).catch(() => updatePutStatus(HttpRequestStatus.ERROR, uuid));\n  }\n\n  static postCard(card) {\n    console.log('card', card);\n    store.dispatch(updatePostStatus(HttpRequestStatus.ONGOING));\n    const promise = axios.post(`${API_PREFIX}/cards`, card, requestConfig);\n    promise.then(response => {\n      store.dispatch(updatePostStatus(HttpRequestStatus.SUCCESS));\n      toast.success('Card criado com sucesso!');\n      const responseCard = response.data;\n      responseCard.id = `api-nao-retorna-o-card-com-id-entao-vou-crirar-um-${Date.now()}`;\n      store.dispatch(addNewCard(responseCard));\n    }).catch(() => updatePostStatus(HttpRequestStatus.ERROR));\n  }\n\n  static changeCardList(card) {\n    store.dispatch(updatePostStatus(HttpRequestStatus.ONGOING));\n    const promise = axios.put(`${API_PREFIX}/cards/${card.id}`, card, requestConfig);\n    promise.then(response => {\n      store.dispatch(updatePostStatus(HttpRequestStatus.SUCCESS));\n      toast.success(`Card atualizado para ${card.lista}`);\n      const responseCard = response.data;\n      store.dispatch(updateCardList(responseCard));\n    }).catch(() => updatePostStatus(HttpRequestStatus.ERROR));\n  }\n\n} // utilities functions\n\nexport const getSeparatedList = cards => {\n  const separatedList = {\n    ToDo: [],\n    Doing: [],\n    Done: []\n  };\n  cards.forEach(it => {\n    separatedList[get(it, 'lista', '')].push(it);\n  });\n  return cloneDeep(separatedList);\n};\nexport const getArrayFromSeparatedList = cards => {\n  const newList = [];\n  Object.values(cards).forEach(it => {\n    it.forEach(item => newList.push(item));\n  });\n  console.log(newList);\n  return newList;\n};\nexport const getStore = () => store;","map":{"version":3,"sources":["/Users/hiagodiniz/Desktop/LetsCode/desafio-tecnico-frontend/FRONT/my-app/src/store/store.ts"],"names":["axios","cloneDeep","get","createStore","appReducer","addNewCard","updateCardList","HttpRequestStatus","API_PREFIX","getRequestConfig","updateCards","updateGetStatus","updateDeleteStatus","updatePutStatus","updateCard","updatePostStatus","toast","store","requestConfig","Api","getCards","dispatch","ONGOING","promise","then","response","SUCCESS","separatedList","getSeparatedList","data","catch","ERROR","deleteCard","uuid","delete","success","putCard","card","id","put","responseCard","postCard","console","log","post","Date","now","changeCardList","lista","cards","ToDo","Doing","Done","forEach","it","push","getArrayFromSeparatedList","newList","Object","values","item","getStore"],"mappings":"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","sourcesContent":["\nimport axios from 'axios';\nimport { cloneDeep, get } from 'lodash';\nimport { createStore } from 'redux';\nimport appReducer, { addNewCard, updateCardList } from '../reducers/reducer';\nimport { HttpRequestStatus } from '../utils/enums';\nimport { API_PREFIX, getRequestConfig } from '../utils/utils';\nimport { updateCards, updateGetStatus, updateDeleteStatus, updatePutStatus, updateCard, updatePostStatus } from '../reducers/reducer';\nimport { ICard, ICardsList, ITemporaryCard } from '../utils/interfaces';\nimport toast from 'react-hot-toast';\n\nconst store = createStore(appReducer);\n\nconst requestConfig = getRequestConfig();\n\n// api communication functions\nexport default class Api {\n  static getCards() {\n    store.dispatch(updateGetStatus(HttpRequestStatus.ONGOING));\n\n    const promise = axios.get(`${API_PREFIX}/cards/`, requestConfig);\n\n    promise.then(response => {\n      store.dispatch(updateGetStatus(HttpRequestStatus.SUCCESS));\n      const separatedList: any = getSeparatedList(response.data);\n      store.dispatch(updateCards(separatedList))\n    }).catch(() => store.dispatch(updateGetStatus(HttpRequestStatus.ERROR)));\n  };\n\n  static deleteCard(uuid: any) {\n    store.dispatch(updateDeleteStatus(HttpRequestStatus.ONGOING, uuid));\n\n    const promise = axios.delete(`${API_PREFIX}/cards/${uuid}`, requestConfig);\n\n    promise.then(response => {\n      store.dispatch(updateDeleteStatus(HttpRequestStatus.SUCCESS, uuid));\n      toast.success('Card deletado com sucesso!');\n      const separatedList: any = getSeparatedList(response.data);\n      store.dispatch(updateCards(separatedList));\n    }).catch(() => updateDeleteStatus(HttpRequestStatus.ERROR, uuid))\n  };\n\n  static putCard(card: ICard) {\n    const uuid = card.id;\n    store.dispatch(updatePutStatus(HttpRequestStatus.ONGOING, uuid));\n\n    const promise = axios.put(`${API_PREFIX}/cards/${uuid}`, card, requestConfig);\n\n    promise.then(response => {\n      store.dispatch(updatePutStatus(HttpRequestStatus.SUCCESS, uuid));\n      toast.success('Card atualizado com sucesso!');\n      const responseCard = response.data;\n      store.dispatch(updateCard(responseCard));\n    }).catch(() => updatePutStatus(HttpRequestStatus.ERROR, uuid))\n  };\n\n  static postCard(card: ICard | ITemporaryCard) {\n    console.log('card', card);\n    store.dispatch(updatePostStatus(HttpRequestStatus.ONGOING));\n\n    const promise = axios.post(`${API_PREFIX}/cards`, card, requestConfig);\n\n    promise.then(response => {\n      store.dispatch(updatePostStatus(HttpRequestStatus.SUCCESS));\n      toast.success('Card criado com sucesso!');\n      const responseCard = response.data;\n      responseCard.id = `api-nao-retorna-o-card-com-id-entao-vou-crirar-um-${Date.now()}`;\n      store.dispatch(addNewCard(responseCard));\n    }).catch(() => updatePostStatus(HttpRequestStatus.ERROR))\n  };\n\n  static changeCardList(card: ICard) {\n    store.dispatch(updatePostStatus(HttpRequestStatus.ONGOING));\n\n    const promise = axios.put(`${API_PREFIX}/cards/${card.id}`, card, requestConfig);\n\n    promise.then(response => {\n      store.dispatch(updatePostStatus(HttpRequestStatus.SUCCESS));\n      toast.success(`Card atualizado para ${card.lista}`);\n      const responseCard = response.data;\n      store.dispatch(updateCardList(responseCard));\n    }).catch(() => updatePostStatus(HttpRequestStatus.ERROR))\n  };\n}\n\n// utilities functions\nexport const getSeparatedList = (cards: ICard[]) => {\n  const separatedList: any = {\n    ToDo: [],\n    Doing: [],\n    Done: []\n  };\n  cards.forEach((it: any) => {\n    separatedList[get(it, 'lista', '')].push(it);\n  });\n  return cloneDeep(separatedList);\n};\n\nexport const getArrayFromSeparatedList = (cards: ICardsList) => {\n  const newList: ICard[] = [];\n\n  Object.values(cards).forEach(it => {\n    it.forEach((item: any) => newList.push(item));\n  });\n\n  console.log(newList);\n  return newList;\n};\n\nexport const getStore = () => store;"]},"metadata":{},"sourceType":"module"}
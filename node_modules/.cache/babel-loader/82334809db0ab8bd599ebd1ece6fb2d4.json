{"ast":null,"code":"import axios from 'axios';\nimport { cloneDeep, get } from 'lodash';\nimport { createStore } from 'redux';\nimport appReducer, { updateCardList } from '../reducers/reducer';\nimport { HttpRequestStatus } from '../utils/enums';\nimport { API_PREFIX, getRequestConfig } from '../utils/utils';\nimport { updateCards, updateGetStatus, updateDeleteStatus, updatePutStatus, updateCard, updatePostStatus } from '../reducers/reducer';\nconst store = createStore(appReducer);\nconst requestConfig = getRequestConfig(); // api communication functions\n\nexport const getCards = () => {\n  store.dispatch(updateGetStatus(HttpRequestStatus.ONGOING));\n  const promise = axios.get(`${API_PREFIX}/cards/`, requestConfig);\n  promise.then(response => {\n    store.dispatch(updateGetStatus(HttpRequestStatus.SUCCESS));\n    const separatedList = getSeparatedList(response.data);\n    store.dispatch(updateCards(separatedList));\n  }).catch(() => store.dispatch(updateGetStatus(HttpRequestStatus.ERROR)));\n};\nexport const deleteCard = uuid => {\n  store.dispatch(updateDeleteStatus(HttpRequestStatus.ONGOING, uuid));\n  const promise = axios.delete(`${API_PREFIX}/cards/${uuid}`, requestConfig);\n  promise.then(response => {\n    store.dispatch(updateDeleteStatus(HttpRequestStatus.SUCCESS, uuid));\n    const separatedList = getSeparatedList(response.data);\n    store.dispatch(updateCards(separatedList));\n  }).catch(() => updateDeleteStatus(HttpRequestStatus.ERROR, uuid));\n};\nexport const putCard = card => {\n  const uuid = card.id;\n  store.dispatch(updatePutStatus(HttpRequestStatus.ONGOING, uuid));\n  const promise = axios.put(`${API_PREFIX}/cards/${uuid}`, card, requestConfig);\n  promise.then(response => {\n    store.dispatch(updatePutStatus(HttpRequestStatus.SUCCESS, uuid));\n    const responseCard = response.data;\n    store.dispatch(updateCard(responseCard));\n  }).catch(() => updatePutStatus(HttpRequestStatus.ERROR, uuid));\n};\nexport const postCard = card => {\n  store.dispatch(updatePostStatus(HttpRequestStatus.ONGOING));\n  const promise = axios.post(`${API_PREFIX}/cards`, card, requestConfig);\n  promise.then(response => {\n    store.dispatch(updatePostStatus(HttpRequestStatus.SUCCESS));\n    const responseCard = response.data;\n    store.dispatch(updateCards(responseCard));\n  }).catch(() => updatePostStatus(HttpRequestStatus.ERROR));\n};\nexport const changeCardList = card => {\n  store.dispatch(updatePostStatus(HttpRequestStatus.ONGOING));\n  const promise = axios.put(`${API_PREFIX}/cards/${card.id}`, card, requestConfig);\n  promise.then(response => {\n    store.dispatch(updatePostStatus(HttpRequestStatus.SUCCESS));\n    const responseCard = response.data;\n    store.dispatch(updateCardList(responseCard));\n  }).catch(() => updatePostStatus(HttpRequestStatus.ERROR));\n}; // utilities functions\n\nexport const getSeparatedList = cards => {\n  const separatedList = {\n    ToDo: [],\n    Doing: [],\n    Done: []\n  };\n  cards.forEach(it => {\n    separatedList[get(it, 'lista', '')].push(it);\n  });\n  return cloneDeep(separatedList);\n};\nexport const getArrayFromSeparatedList = cards => {\n  const newList = [];\n  Object.values(cards).forEach(it => {\n    it.forEach(item => newList.push(item));\n  });\n  console.log(newList);\n  return newList;\n};\nexport const getStore = () => store;","map":{"version":3,"sources":["/Users/hiagodiniz/Desktop/LetsCode/desafio-tecnico-frontend/FRONT/my-app/src/store/store.ts"],"names":["axios","cloneDeep","get","createStore","appReducer","updateCardList","HttpRequestStatus","API_PREFIX","getRequestConfig","updateCards","updateGetStatus","updateDeleteStatus","updatePutStatus","updateCard","updatePostStatus","store","requestConfig","getCards","dispatch","ONGOING","promise","then","response","SUCCESS","separatedList","getSeparatedList","data","catch","ERROR","deleteCard","uuid","delete","putCard","card","id","put","responseCard","postCard","post","changeCardList","cards","ToDo","Doing","Done","forEach","it","push","getArrayFromSeparatedList","newList","Object","values","item","console","log","getStore"],"mappings":"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","sourcesContent":["\nimport axios from 'axios';\nimport { cloneDeep, get } from 'lodash';\nimport { createStore } from 'redux';\nimport appReducer, { updateCardList } from '../reducers/reducer';\nimport { HttpRequestStatus } from '../utils/enums';\nimport { API_PREFIX, getRequestConfig } from '../utils/utils';\nimport { updateCards, updateGetStatus, updateDeleteStatus, updatePutStatus, updateCard, updatePostStatus } from '../reducers/reducer';\nimport { ICard, ICardsList } from '../utils/interfaces';\n\nconst store = createStore(appReducer);\n\nconst requestConfig = getRequestConfig();\n\n// api communication functions\nexport const getCards = () => {\n  store.dispatch(updateGetStatus(HttpRequestStatus.ONGOING));\n\n  const promise = axios.get(`${API_PREFIX}/cards/`, requestConfig);\n\n  promise.then(response => {\n    store.dispatch(updateGetStatus(HttpRequestStatus.SUCCESS));\n    const separatedList: any = getSeparatedList(response.data);\n    store.dispatch(updateCards(separatedList))\n  }).catch(() => store.dispatch(updateGetStatus(HttpRequestStatus.ERROR)));\n};\n\nexport const deleteCard = (uuid: any) => {\n  store.dispatch(updateDeleteStatus(HttpRequestStatus.ONGOING, uuid));\n\n  const promise = axios.delete(`${API_PREFIX}/cards/${uuid}`, requestConfig);\n\n  promise.then(response => {\n    store.dispatch(updateDeleteStatus(HttpRequestStatus.SUCCESS, uuid));\n    const separatedList: any = getSeparatedList(response.data);\n    store.dispatch(updateCards(separatedList));\n  }).catch(() => updateDeleteStatus(HttpRequestStatus.ERROR, uuid))\n}; \n\nexport const putCard = (card: ICard) => {\n  const uuid = card.id;\n  store.dispatch(updatePutStatus(HttpRequestStatus.ONGOING, uuid));\n  \n  const promise = axios.put(`${API_PREFIX}/cards/${uuid}`, card, requestConfig);\n\n  promise.then(response => {\n    store.dispatch(updatePutStatus(HttpRequestStatus.SUCCESS, uuid));\n    const responseCard = response.data;\n    store.dispatch(updateCard(responseCard));\n  }).catch(() => updatePutStatus(HttpRequestStatus.ERROR, uuid))\n};\n\nexport const postCard = (card: ICard) => {\n  store.dispatch(updatePostStatus(HttpRequestStatus.ONGOING));\n\n  const promise = axios.post(`${API_PREFIX}/cards`, card, requestConfig);\n\n  promise.then(response => {\n    store.dispatch(updatePostStatus(HttpRequestStatus.SUCCESS));\n    const responseCard = response.data;\n    store.dispatch(updateCards(responseCard));\n  }).catch(() => updatePostStatus(HttpRequestStatus.ERROR))\n};\n\nexport const changeCardList = (card: ICard) => {\n  store.dispatch(updatePostStatus(HttpRequestStatus.ONGOING));\n\n  const promise = axios.put(`${API_PREFIX}/cards/${card.id}`, card, requestConfig);\n\n  promise.then(response => {\n    store.dispatch(updatePostStatus(HttpRequestStatus.SUCCESS));\n    const responseCard = response.data;\n    store.dispatch(updateCardList(responseCard));\n  }).catch(() => updatePostStatus(HttpRequestStatus.ERROR))\n};\n\n// utilities functions\nexport const getSeparatedList = (cards: ICard[]) => {\n  const separatedList: any = {\n    ToDo: [],\n    Doing: [],\n    Done: []\n  };\n  cards.forEach((it: any) => {\n    separatedList[get(it, 'lista', '')].push(it);\n  });\n  return cloneDeep(separatedList);\n};\n\nexport const getArrayFromSeparatedList = (cards: ICardsList) => {\n  const newList: ICard[] = [];\n\n  Object.values(cards).forEach(it => {\n    it.forEach((item: any) => newList.push(item));\n  });\n\n  console.log(newList);\n  return newList;\n};\n\nexport const getStore = () => store;"]},"metadata":{},"sourceType":"module"}
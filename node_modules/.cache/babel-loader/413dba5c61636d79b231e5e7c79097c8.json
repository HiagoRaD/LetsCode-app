{"ast":null,"code":"import axios from 'axios';\nimport { cloneDeep, get } from 'lodash';\nimport { createStore } from 'redux';\nimport appReducer, { updateCardList } from '../reducers/reducer';\nimport { HttpRequestStatus } from '../utils/enums';\nimport { API_PREFIX, getRequestConfig } from '../utils/utils';\nimport { updateCards, updateGetStatus, updateDeleteStatus, updatePutStatus, updateCard, updatePostStatus } from '../reducers/reducer';\nconst store = createStore(appReducer);\nconst requestConfig = getRequestConfig(); // api communication functions\n\nexport default class Api {\n  static getCards() {\n    store.dispatch(updateGetStatus(HttpRequestStatus.ONGOING));\n    const promise = axios.get(`${API_PREFIX}/cards/`, requestConfig);\n    promise.then(response => {\n      store.dispatch(updateGetStatus(HttpRequestStatus.SUCCESS));\n      const separatedList = getSeparatedList(response.data);\n      store.dispatch(updateCards(separatedList));\n    }).catch(() => store.dispatch(updateGetStatus(HttpRequestStatus.ERROR)));\n  }\n\n  static deleteCard(uuid) {\n    store.dispatch(updateDeleteStatus(HttpRequestStatus.ONGOING, uuid));\n    const promise = axios.delete(`${API_PREFIX}/cards/${uuid}`, requestConfig);\n    promise.then(response => {\n      store.dispatch(updateDeleteStatus(HttpRequestStatus.SUCCESS, uuid));\n      const separatedList = getSeparatedList(response.data);\n      store.dispatch(updateCards(separatedList));\n    }).catch(() => updateDeleteStatus(HttpRequestStatus.ERROR, uuid));\n  }\n\n  static putCard(card) {\n    const uuid = card.id;\n    store.dispatch(updatePutStatus(HttpRequestStatus.ONGOING, uuid));\n    const promise = axios.put(`${API_PREFIX}/cards/${uuid}`, card, requestConfig);\n    promise.then(response => {\n      store.dispatch(updatePutStatus(HttpRequestStatus.SUCCESS, uuid));\n      const responseCard = response.data;\n      store.dispatch(updateCard(responseCard));\n    }).catch(() => updatePutStatus(HttpRequestStatus.ERROR, uuid));\n  }\n\n  static postCard(card) {\n    store.dispatch(updatePostStatus(HttpRequestStatus.ONGOING));\n    const promise = axios.post(`${API_PREFIX}/cards`, card, requestConfig);\n    promise.then(response => {\n      store.dispatch(updatePostStatus(HttpRequestStatus.SUCCESS));\n      const responseCard = response.data;\n      store.dispatch(updateCards(responseCard));\n    }).catch(() => updatePostStatus(HttpRequestStatus.ERROR));\n  }\n\n  static changeCardList(card) {\n    store.dispatch(updatePostStatus(HttpRequestStatus.ONGOING));\n    const promise = axios.put(`${API_PREFIX}/cards/${card.id}`, card, requestConfig);\n    promise.then(response => {\n      store.dispatch(updatePostStatus(HttpRequestStatus.SUCCESS));\n      const responseCard = response.data;\n      store.dispatch(updateCardList(responseCard));\n    }).catch(() => updatePostStatus(HttpRequestStatus.ERROR));\n  }\n\n} // utilities functions\n\nexport const getSeparatedList = cards => {\n  const separatedList = {\n    ToDo: [],\n    Doing: [],\n    Done: []\n  };\n  cards.forEach(it => {\n    separatedList[get(it, 'lista', '')].push(it);\n  });\n  return cloneDeep(separatedList);\n};\nexport const getArrayFromSeparatedList = cards => {\n  const newList = [];\n  Object.values(cards).forEach(it => {\n    it.forEach(item => newList.push(item));\n  });\n  console.log(newList);\n  return newList;\n};\nexport const getStore = () => store;","map":{"version":3,"sources":["/Users/hiagodiniz/Desktop/LetsCode/desafio-tecnico-frontend/FRONT/my-app/src/store/store.ts"],"names":["axios","cloneDeep","get","createStore","appReducer","updateCardList","HttpRequestStatus","API_PREFIX","getRequestConfig","updateCards","updateGetStatus","updateDeleteStatus","updatePutStatus","updateCard","updatePostStatus","store","requestConfig","Api","getCards","dispatch","ONGOING","promise","then","response","SUCCESS","separatedList","getSeparatedList","data","catch","ERROR","deleteCard","uuid","delete","putCard","card","id","put","responseCard","postCard","post","changeCardList","cards","ToDo","Doing","Done","forEach","it","push","getArrayFromSeparatedList","newList","Object","values","item","console","log","getStore"],"mappings":"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","sourcesContent":["\nimport axios from 'axios';\nimport { cloneDeep, get } from 'lodash';\nimport { createStore } from 'redux';\nimport appReducer, { updateCardList } from '../reducers/reducer';\nimport { HttpRequestStatus } from '../utils/enums';\nimport { API_PREFIX, getRequestConfig } from '../utils/utils';\nimport { updateCards, updateGetStatus, updateDeleteStatus, updatePutStatus, updateCard, updatePostStatus } from '../reducers/reducer';\nimport { ICard, ICardsList } from '../utils/interfaces';\n\nconst store = createStore(appReducer);\n\nconst requestConfig = getRequestConfig();\n\n// api communication functions\nexport default class Api {\n  static getCards() {\n    store.dispatch(updateGetStatus(HttpRequestStatus.ONGOING));\n\n    const promise = axios.get(`${API_PREFIX}/cards/`, requestConfig);\n\n    promise.then(response => {\n      store.dispatch(updateGetStatus(HttpRequestStatus.SUCCESS));\n      const separatedList: any = getSeparatedList(response.data);\n      store.dispatch(updateCards(separatedList))\n    }).catch(() => store.dispatch(updateGetStatus(HttpRequestStatus.ERROR)));\n  };\n\n  static deleteCard(uuid: any) {\n    store.dispatch(updateDeleteStatus(HttpRequestStatus.ONGOING, uuid));\n\n    const promise = axios.delete(`${API_PREFIX}/cards/${uuid}`, requestConfig);\n\n    promise.then(response => {\n      store.dispatch(updateDeleteStatus(HttpRequestStatus.SUCCESS, uuid));\n      const separatedList: any = getSeparatedList(response.data);\n      store.dispatch(updateCards(separatedList));\n    }).catch(() => updateDeleteStatus(HttpRequestStatus.ERROR, uuid))\n  };\n\n  static putCard(card: ICard) {\n    const uuid = card.id;\n    store.dispatch(updatePutStatus(HttpRequestStatus.ONGOING, uuid));\n\n    const promise = axios.put(`${API_PREFIX}/cards/${uuid}`, card, requestConfig);\n\n    promise.then(response => {\n      store.dispatch(updatePutStatus(HttpRequestStatus.SUCCESS, uuid));\n      const responseCard = response.data;\n      store.dispatch(updateCard(responseCard));\n    }).catch(() => updatePutStatus(HttpRequestStatus.ERROR, uuid))\n  };\n\n  static postCard(card: ICard | undefined) {\n    store.dispatch(updatePostStatus(HttpRequestStatus.ONGOING));\n\n    const promise = axios.post(`${API_PREFIX}/cards`, card, requestConfig);\n\n    promise.then(response => {\n      store.dispatch(updatePostStatus(HttpRequestStatus.SUCCESS));\n      const responseCard = response.data;\n      store.dispatch(updateCards(responseCard));\n    }).catch(() => updatePostStatus(HttpRequestStatus.ERROR))\n  };\n\n  static changeCardList(card: ICard) {\n    store.dispatch(updatePostStatus(HttpRequestStatus.ONGOING));\n\n    const promise = axios.put(`${API_PREFIX}/cards/${card.id}`, card, requestConfig);\n\n    promise.then(response => {\n      store.dispatch(updatePostStatus(HttpRequestStatus.SUCCESS));\n      const responseCard = response.data;\n      store.dispatch(updateCardList(responseCard));\n    }).catch(() => updatePostStatus(HttpRequestStatus.ERROR))\n  };\n}\n\n// utilities functions\nexport const getSeparatedList = (cards: ICard[]) => {\n  const separatedList: any = {\n    ToDo: [],\n    Doing: [],\n    Done: []\n  };\n  cards.forEach((it: any) => {\n    separatedList[get(it, 'lista', '')].push(it);\n  });\n  return cloneDeep(separatedList);\n};\n\nexport const getArrayFromSeparatedList = (cards: ICardsList) => {\n  const newList: ICard[] = [];\n\n  Object.values(cards).forEach(it => {\n    it.forEach((item: any) => newList.push(item));\n  });\n\n  console.log(newList);\n  return newList;\n};\n\nexport const getStore = () => store;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { get, set } from 'lodash';\nexport const ACTION_TYPES = {\n  UPDATE_CARD: 'UPDATE_CARD',\n  ADD_NEW_CARD: 'ADD_NEW_CARD',\n  UPDATE_GET_STATUS: 'UPDATE_GET_STATUS',\n  UPDATE_GET_DATA: 'UPDATE_GET_DATA',\n  UPDATE_PUT_STATUS: 'UPDATE_PUT_STATUS',\n  UPDATE_PUT_DATA: 'UPDATE_PUT_DATA',\n  UPDATE_POST_STATUS: 'UPDATE_POST_STATUS',\n  UPDATE_POST_DATA: 'UPDATE_POST_DATA',\n  UPDATE_DELETE_STATUS: 'UPDATE_DELETE_STATUS',\n  UPDATE_DELETE_DATA: 'UPDATE_DELETE_DATA',\n  UPDATE_TOKEN: 'UPDATE_TOKEN',\n  UPDATE_CARDS: 'UPDATE_CARDS'\n};\nconst initialState = {\n  cards: {\n    'ToDo': [],\n    'Doing': [],\n    'Done': []\n  },\n  getData: {},\n  putData: {},\n  postData: {},\n  deleteData: {},\n  jwtToken: ''\n};\n\nconst appReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ACTION_TYPES.UPDATE_CARDS:\n      return { ...state,\n        cards: action.payload.data\n      };\n\n    case ACTION_TYPES.UPDATE_GET_STATUS:\n      return { ...state,\n        getData: { ...state.getData,\n          status: action.payload.status\n        }\n      };\n\n    case ACTION_TYPES.UPDATE_GET_DATA:\n      return { ...state,\n        getData: { ...state.getData,\n          data: action.payload.data\n        }\n      };\n\n    case ACTION_TYPES.UPDATE_PUT_STATUS:\n      return { ...state,\n        putData: { ...state.putData,\n          [action.meta.key]: action.payload.status\n        }\n      };\n\n    case ACTION_TYPES.UPDATE_DELETE_STATUS:\n      return { ...state,\n        deleteData: { ...state.deleteData,\n          [action.meta.key]: action.payload.status\n        }\n      };\n\n    case ACTION_TYPES.UPDATE_POST_STATUS:\n      return { ...state\n      };\n\n    case ACTION_TYPES.UPDATE_CARD:\n      console.log('update_card');\n      const newStateUpdate = { ...state\n      };\n      console.log(newStateUpdate);\n      const index = get(newStateUpdate.cards, action.payload.data.lista).findIndex(it => it.id === action.payload.data.id);\n      set(get(newStateUpdate.cards[get(action.payload, 'data.lista', -1)], action.payload.data.lista), index, action.payload.data);\n      console.log(newStateUpdate);\n      return newStateUpdate;\n\n    case ACTION_TYPES.ADD_NEW_CARD:\n      const newStateAdd = { ...state\n      };\n      get(newStateAdd.cards, action.payload.data.lista).push(action.payload.data);\n      return newStateAdd;\n\n    case ACTION_TYPES.UPDATE_TOKEN:\n      return { ...state,\n        jwtToken: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default appReducer;\nexport const updateJwtToken = newToken => ({\n  type: ACTION_TYPES.UPDATE_TOKEN,\n  payload: newToken\n});\nexport const updateCard = card => ({\n  type: ACTION_TYPES.UPDATE_CARD,\n  payload: {\n    data: card\n  }\n});\nexport const addNewCard = card => ({\n  type: ACTION_TYPES.ADD_NEW_CARD,\n  payload: {\n    data: card\n  }\n});\nexport const updateCards = cardsList => ({\n  type: ACTION_TYPES.UPDATE_CARDS,\n  payload: {\n    data: cardsList\n  }\n});\nexport const updateGetStatus = status => ({\n  type: ACTION_TYPES.UPDATE_GET_STATUS,\n  payload: {\n    status\n  }\n});\nexport const updatePostStatus = status => ({\n  type: ACTION_TYPES.UPDATE_POST_STATUS,\n  payload: {\n    status\n  }\n});\nexport const updatePutStatus = (status, uuid) => ({\n  type: ACTION_TYPES.UPDATE_PUT_STATUS,\n  payload: {\n    status\n  },\n  meta: {\n    key: uuid\n  }\n});\nexport const updateDeleteStatus = (status, uuid) => ({\n  type: ACTION_TYPES.UPDATE_DELETE_STATUS,\n  payload: {\n    status\n  },\n  meta: {\n    key: uuid\n  }\n});","map":{"version":3,"sources":["/Users/hiagodiniz/Desktop/LetsCode/desafio-tecnico-frontend/FRONT/my-app/src/reducers/reducer.ts"],"names":["get","set","ACTION_TYPES","UPDATE_CARD","ADD_NEW_CARD","UPDATE_GET_STATUS","UPDATE_GET_DATA","UPDATE_PUT_STATUS","UPDATE_PUT_DATA","UPDATE_POST_STATUS","UPDATE_POST_DATA","UPDATE_DELETE_STATUS","UPDATE_DELETE_DATA","UPDATE_TOKEN","UPDATE_CARDS","initialState","cards","getData","putData","postData","deleteData","jwtToken","appReducer","state","action","type","payload","data","status","meta","key","console","log","newStateUpdate","index","lista","findIndex","it","id","newStateAdd","push","updateJwtToken","newToken","updateCard","card","addNewCard","updateCards","cardsList","updateGetStatus","updatePostStatus","updatePutStatus","uuid","updateDeleteStatus"],"mappings":"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","sourcesContent":["import { get, set } from 'lodash';\nimport { HttpRequestStatus } from '../utils/enums';\nimport { IAction, ICard, ICardsList, IReducerListObjects, IReducerListStatusObjects, IRequestData } from '../utils/interfaces';\n\nexport const ACTION_TYPES = {\n  UPDATE_CARD: 'UPDATE_CARD',\n  ADD_NEW_CARD: 'ADD_NEW_CARD',\n\n  UPDATE_GET_STATUS: 'UPDATE_GET_STATUS',\n  UPDATE_GET_DATA: 'UPDATE_GET_DATA',\n  \n  UPDATE_PUT_STATUS: 'UPDATE_PUT_STATUS',\n  UPDATE_PUT_DATA: 'UPDATE_PUT_DATA',\n  \n  UPDATE_POST_STATUS: 'UPDATE_POST_STATUS',\n  UPDATE_POST_DATA: 'UPDATE_POST_DATA',\n  \n  UPDATE_DELETE_STATUS: 'UPDATE_DELETE_STATUS',\n  UPDATE_DELETE_DATA: 'UPDATE_DELETE_DATA',\n\n  UPDATE_TOKEN: 'UPDATE_TOKEN',\n\n  UPDATE_CARDS: 'UPDATE_CARDS'\n};\n\nexport interface IReducerState {\n  cards: ICardsList;\n  getData: IRequestData<ICard[]>;\n  putData: IReducerListStatusObjects;\n  postData: IReducerListObjects<ICard>;\n  deleteData: IReducerListStatusObjects;\n  jwtToken: string;\n}\n\nconst initialState: IReducerState = {\n  cards: {\n    'ToDo': [],\n    'Doing': [],\n    'Done': []\n  },\n  getData: {},\n  putData: {},\n  postData: {},\n  deleteData: {},\n  jwtToken: ''\n};\n\nconst appReducer = (state: IReducerState = initialState, action: IAction): IReducerState => {\n  switch (action.type) {\n    case ACTION_TYPES.UPDATE_CARDS:\n      return {\n        ...state,\n        cards: action.payload.data\n      }; \n    case ACTION_TYPES.UPDATE_GET_STATUS:\n      return {\n        ...state,\n        getData: {\n          ...state.getData,\n          status: action.payload.status\n        }\n      };\n    case ACTION_TYPES.UPDATE_GET_DATA:\n      return {\n        ...state,\n        getData: {\n          ...state.getData,\n          data: action.payload.data\n        }\n      };\n    case ACTION_TYPES.UPDATE_PUT_STATUS:\n      return {\n        ...state,\n        putData: {\n          ...state.putData,\n          [action.meta.key]: action.payload.status\n        }\n      };\n    case ACTION_TYPES.UPDATE_DELETE_STATUS:\n      return {\n        ...state,\n        deleteData: {\n          ...state.deleteData,\n          [action.meta.key]: action.payload.status\n        }\n      };\n    case ACTION_TYPES.UPDATE_POST_STATUS:\n      return {\n        ...state\n      };\n    case ACTION_TYPES.UPDATE_CARD:\n      console.log('update_card');\n      const newStateUpdate = {\n        ...state\n      };\n      console.log(newStateUpdate);\n      const index = get(newStateUpdate.cards, action.payload.data.lista).findIndex((it: any) => it.id === action.payload.data.id);\n\n      set(get(newStateUpdate.cards[get(action.payload, 'data.lista', -1 as number)], action.payload.data.lista), index, action.payload.data);\n      console.log(newStateUpdate);\n      return newStateUpdate;\n    case ACTION_TYPES.ADD_NEW_CARD:\n      const newStateAdd = {\n        ...state\n      };\n      get(newStateAdd.cards, action.payload.data.lista).push(action.payload.data);\n      return newStateAdd;\n    case ACTION_TYPES.UPDATE_TOKEN:\n      return {\n        ...state,\n        jwtToken: action.payload\n      }\n    default:\n      return state;\n  }\n};\n\nexport default appReducer;\n\nexport const updateJwtToken = (newToken: string) => ({\n  type: ACTION_TYPES.UPDATE_TOKEN,\n  payload: newToken\n});\n\nexport const updateCard = (card: ICard) => ({\n  type: ACTION_TYPES.UPDATE_CARD,\n  payload: { data: card }\n}); \n\nexport const addNewCard = (card: ICard) => ({\n  type: ACTION_TYPES.ADD_NEW_CARD,\n  payload: { data: card }\n}); \n\nexport const updateCards = (cardsList: ICardsList) => ({\n  type: ACTION_TYPES.UPDATE_CARDS,\n  payload: { data: cardsList }\n});\n\nexport const updateGetStatus = (status: HttpRequestStatus) => ({\n  type: ACTION_TYPES.UPDATE_GET_STATUS,\n  payload: { status }\n});\n\nexport const updatePostStatus = (status: HttpRequestStatus) => ({\n  type: ACTION_TYPES.UPDATE_POST_STATUS,\n  payload: { status }\n});\n\nexport const updatePutStatus = (status: HttpRequestStatus, uuid: string) => ({\n  type: ACTION_TYPES.UPDATE_PUT_STATUS,\n  payload: { status },\n  meta: { key: uuid }\n});\n\nexport const updateDeleteStatus = (status: HttpRequestStatus, uuid: string) => ({\n  type: ACTION_TYPES.UPDATE_DELETE_STATUS,\n  payload: { status },\n  meta: { key: uuid }\n});\n"]},"metadata":{},"sourceType":"module"}